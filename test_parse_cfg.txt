S -> STATEMENT 

###STATEMENT###


###STATEMENT###
STATEMENT -> STATEMENT STATEMENT | ASSIGN EOL | EXPR EOL | VAR EOL | IFMSTART | LOOP | SWITCH | TRYM | FUNCTION | DELETE
LSTATEMENT -> LSTATEMENT LSTATEMENT | ASSIGN EOL | EXPR EOL | VAR EOL | LABELCONTROL EOL | LABELCONTROL EXPR EOL | SWITCH | IFLSTART | LOOP | TRYL | FUNCTION | DELETE | LABELCONTROL VAR EOL
CONDITION -> EXPR | variabel EQUAL EXPR

###ASSIGNMENT###
ASSIGN -> variabel OPASS EXPR | DECLARE variabel OPASS EXPR | DECLARE variabel EQUAL KKB PROPERTIES KKT
ASSIGNVALONLY -> variabel OPASS EXPR | DECLARE variabel OPASS EXPR
EXPR -> EXPR_I | EXPR_S | INCREMENT VAR | VAR INCREMENT | CHAIN | BOOLEAN
EXPR_I -> INTEGER_ONLY | KBB EXPR_I KBT | INTEGER_ONLY OPEXP INTEGER_ONLY | EXPR_I OPEXP EXPR_I |  EXPR_I
EXPR_S -> STRING_ONLY | KBB EXPR_S KBT | EXPR_S OPEXP EXPR_S






###CONTROL FLOW###

#CHAIN
CHAIN -> CONDITION ? EXPR : EXPR | CONDTION ? EXPR : CHAIN

#Switch
SWITCH -> switch KBB CONDITION KBT KKB CASE KKT | switch KBB CONDITION KBT KKB CASE DEFAULT KKT | switch KBB CONDITION KBT KKB KKT 
CASE -> case ANYVAL COLON LSTATEMENT | CASE CASE | case ANYVAL COLON
DEFAULT -> default COLON LSTATEMENT | case ANYVAL COLON

#IF
IFMSTART -> IFM | IFM ELIFM | IFM ELSEM | IFM ELIFM ELSEM
IFM -> if KBB CONDITION KBT KKB KKT | if KBB CONDITION KBT KKB STATEMENT KKT
ELIFM -> ELIFM ELIFM | else if KBB CONDITION KBT KKB KKT | else if KBB CONDITION KBT KKB STATEMENT KKT
ELSEM -> else KKB KKT | else KKB STATEMENT KKT

IFLSTART -> IFL | IFL ELIFL | IFL ELSEL | IFL ELIFL ELSEL
IFL -> if KBB CONDITION KBT KKB KKT | if KBB CONDITION KBT KKB LSTATEMENT KKT
ELIFL -> ELIFL ELIFL | else if KBB CONDITION KBT KKB KKT | else if KBB CONDITION KBT KKB LSTATEMENT KKT
ELSEL -> else KKB KKT | else KKB LSTATEMENT KKT



### LOOP ###
#WHILE STATEMENT
#while(cond){state}
LOOP ->  WHILE | FOR
WHILE -> while KBB CONDITION KBT KKB LSTATEMENT KKT | while KBB CONDITION KBT KKB KKT | while KBB KBT KKB KKT | while KBB KBT KKB LSTATEMENT KKT
# do while statement
WHILE ->  do KKB LSTATEMENT KKT while KBB CONDITION KBT EOL | do KKB LSTATEMENT KKT while KBB KBT EOL | do KKB KKT while KBB CONDITION KBT EOL | do KKB KKT while KBB KBT EOL



#FOR
FOR -> for KBB CONDITION EOL CONDITION EOL CONDITION KBT KKB LSTATEMENT KKT | for KBB CONDITION EOL CONDITION EOL CONDITION KBT KKB KKT 

#TRY CATCH
TRYM -> try KKB STATEMENT KKT CATCHM | try KKB STATEMENT KKT FINALLYM | try KKB STATEMENT KKT CATCHM FINALLYM | try KKB  KKT CATCHM | try KKB  KKT FINALLYM | try KKB KKT CATCHM FINALLYM
CATCHM -> catch KBB VAR KBT KKB STATEMENT KKT | catch KBB KBT KKB STATEMENT KKT | catch KBB VAR KBT KKB KKT
FINALLYM -> finally KKB STATEMENT KKT | finally KBB KBT KKB STATEMENT KKT | finally KBB VAR KBT KKB KKT

TRYL -> try KKB LSTATEMENT KKT CATCHL | try KKB LSTATEMENT KKT FINALLYL | try KKB LSTATEMENT KKT CATCHL FINALLYL | try KKB  KKT CATCHL | try KKB  KKT FINALLYL | try KKB KKT CATCHL FINALLYL
CATCHL -> catch KBB VAR KBT KKB LSTATEMENT KKT | catch KBB KBT KKB LSTATEMENT KKT | catch KBB VAR KBT KKB KKT
FINALLYL -> finally KKB LSTATEMENT KKT | finally KBB KBT KKB LSTATEMENT KKT | finally KBB VAR KBT KKB KKT
###LABELCONTROL###
LABELCONTROL -> break | continue | return


###VARIABEL###
LABEL -> SINGLE_VAR COLON
DECLARE -> var | let | const
STRING_ONLY -> benang | variabel | VAR | null | BOOLEAN
INTEGER_ONLY -> angka | variabel | SIGN angka | SIGN variabel | VAR | null
ANYVAL -> VAR | INTEGER_ONLY | STRING_ONLY | BOOLEAN
BOOLEAN -> true | false | null

###VARIABEL FUNCTION FORMAT###
PROPERTIES -> PROPERTIES COMMA PROPERTIES | SINGLE_VAR COLON ANYVAL
VAR -> variabel | VAR . VAR | VAR KBB PARAM KBT | VAR KBB KBT
PARAM -> PARAM COMMA PARAM | ANYVAL | ASSIGNVALONLY 
SINGLE_VAR -> variabel
FUNCTION -> function variabel KBB PARAM KBT KKB LSTATEMENT KKT | function variabel KBB PARAM KBT KKB KKT | function variabel KBB KBT KKB LSTATEMENT KKT | function variabel KBB KBT KKB KKT
DELETE -> delete VAR EOL

###OPERATOR###
EOL  ->  ;
OPEXP -> opExp | opPrec |opAmb
OPASS -> opAssignment | EQUAL
KBB -> (
KBT -> )
KKB -> {
KKT -> }
Dot -> .
SIGN -> opAmb 
INCREMENT -> opPrec
EQUAL -> equal
COMMA -> ,
COLON -> opels
