S -> STATEMENT 

###STATEMENT###


###STATEMENT###
STATEMENT -> STATEMENT STATEMENT | ASSIGN EOL | EXPR EOL | VAR EOL | SWITCH
LSTATEMENT -> LSTATEMENT LSTATEMENT | ASSIGN EOL | EXPR EOL | VAR EOL | LABELCONTROL EOL | LABELCONTROL variabel EOL
CONDITION -> EXPR | variabel EQUAL EXPR

###ASSIGNMENT###
ASSIGN -> variabel OPASS EXPR | DECLARE variabel OPASS EXPR | DECLARE variabel EQUAL KKB PROPERTIES KKT
ASSIGNVALONLY -> variabel OPASS EXPR | DECLARE variabel OPASS EXPR
EXPR -> EXPR_I | EXPR_S
EXPR_I -> INTEGER_ONLY | KBB EXPR_I KBT | INTEGER_ONLY OPEXP INTEGER_ONLY
EXPR_I -> EXPR_I OPEXP EXPR_I
EXPR_S -> STRING_ONLY | KBB EXPR_S KBT
EXPR_S -> EXPR_S OPEXP EXPR_S






###CONTROL FLOW###
#Switch
SWITCH -> switch KBB EXPR KBT KKB CASE KKT
SWITCH -> switch KBB EXPR KBT KKB CASE DEFAULT KKT
CASE -> case ANYVAL COLON LSTATEMENT | CASE CASE | case ANYVAL COLON
DEFAULT -> case ANYVAL COLON LSTATEMENT | case ANYVAL COLON
### LOOP ###
#WHILE STATEMENT
#while(cond){state}
WHILE -> while KBB CONDITION KBT KKB STATEMENT KKT EOL 
LOOP ->  WHILE


# do while statement
WHILE ->  do KKB STATEMENT KKT while KKB KKT  EOL





###LABELCONTROL###
LABELCONTROL -> break | continue | return


###VARIABEL###
LABEL -> SINGLE_VAR COLON
DECLARE -> var | let | const
STRING_ONLY -> benang | variabel
INTEGER_ONLY -> angka | variabel
ANYVAL -> VAR | INTEGER_ONLY | STRING_ONLY | BOOLEAN
BOOLEAN -> true | false

###VARIABEL FUNCTION FORMAT###
PROPERTIES -> PROPERTIES COMMA PROPERTIES | SINGLE_VAR COLON ANYVAL
VAR -> variabel | VAR DOT VAR | VAR DOT VAR KBB PARAM KBT |  VAR DOT VAR KBB PARAM KBT
PARAM -> PARAM COMMA PARAM | ANYVAL | ASSIGNVALONLY | 
SINGLE_VAR -> variabel

###OPERATOR###
EOL  ->  ;
OPEXP -> opExp | opPrec |opAmb
OPASS -> opAssignment | EQUAL
KBB -> (
KBT -> )
KKB -> {
KKT -> }
Dot -> .
SIGN -> opAmb | opAmb
EQUAL -> equal
COMMA -> ,
COLON -> opels
