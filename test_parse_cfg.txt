S ->  S S | LOOP | STATEMENT

###STATEMENT###
STATEMENT -> STATEMENT STATEMENT | ASSIGN EOL 
LSTATEMENT -> STATEMENT | BREAK EOL | BREAK variabel EOL
ASSIGN -> variabel opAss EXPR | DECLARE variabel opAss EXPR | DECARE variabel EQUAL KKB PROPERTIES KKT
EXPR -> EXPR_I | EXPR_S
EXPR_I -> INTEGER_ONLY | KBB EXPR_I KBT | INTEGER_ONLY OPEXP INTEGER_ONLY
EXPR -> EXPR_I OPEXP EXPR_I

PROPERTIES -> PROPERTIES COMMA PROPERTIES | SINGLE_VAR COLON VAR
EXPR_S -> STRING_ONLY | KBB EXPR_S KBT
EXPR_S -> EXPR_S OPEXP EXPR_S


#CONDITION


###CONTROL FLOW###
#Switch
SWITCH -> switch KBB CONDITION  KBT KKT


### LOOP ###
#WHILE STATEMENT
#while(cond){state}
WHILE -> while KBB CONDITION KBT KKB STATEMENT KKT EOL 
LOOP ->  WHILE


# do while statement
WHILE ->  do KKB STATEMENT KKT while KKB KKT  EOL



VAR -> variabel | VAR DOT VAR | VAR DOT VAR KBB PARAM KBT |  VAR DOT VAR KBB PARAM KBT
SINGLE_VAR -> variabel
DECLARE -> var | let | const
STRING_ONLY -> benang | variabel
INTEGER_ONLY -> angka | variabel
BREAK -> break
CONTINUE -> continue
RETURN -> return
EOL  ->  ;
OPEXP -> opExp | opPrec |opAmb
KBB -> (
KBT -> )
KKB -> {
KKT -> }
Dot -> .
SIGN -> opAmb | opAmb
EQUAL -> =
COMMA -> ,
COLON -> :